// Test script for SIMONTOK API with superadmin credentials (Browser-like approach)\nconst https = require('https');\n\n// Configuration\nconst API_BASE_URL = 'simontok-api.vercel.app';\nconst SUPERADMIN_CREDENTIALS = {\n  username: 'superadmin',\n  password: 'Pertamina1*'\n};\n\nlet authToken = null;\n\n// Utility function to make HTTP requests with browser-like headers\nconst makeBrowserRequest = (options, postData = null) => {\n  return new Promise((resolve, reject) => {\n    // Add browser-like headers\n    options.headers = {\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n      'Accept': 'application/json, text/plain, */*',\n      'Accept-Language': 'en-US,en;q=0.9',\n      'Accept-Encoding': 'gzip, deflate, br',\n      'Connection': 'keep-alive',\n      'Upgrade-Insecure-Requests': '1',\n      'Sec-Fetch-Dest': 'empty',\n      'Sec-Fetch-Mode': 'cors',\n      'Sec-Fetch-Site': 'same-origin',\n      ...options.headers\n    };\n    \n    const req = https.request(options, (res) => {\n      let data = '';\n      \n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n      \n      res.on('end', () => {\n        try {\n          // Try to parse as JSON first\n          const jsonData = data ? JSON.parse(data) : {};\n          resolve({\n            statusCode: res.statusCode,\n            headers: res.headers,\n            data: jsonData\n          });\n        } catch (error) {\n          // If JSON parsing fails, return raw data\n          resolve({\n            statusCode: res.statusCode,\n            headers: res.headers,\n            data: data,\n            raw: true\n          });\n        }\n      });\n    });\n\n    req.on('error', (error) => {\n      reject(error);\n    });\n\n    if (postData) {\n      req.write(postData);\n    }\n    \n    req.end();\n  });\n};\n\n// Test Root Endpoint\nconst testRootEndpoint = async () => {\n  console.log('\\n=== Testing Root Endpoint ===');\n  \n  const options = {\n    hostname: API_BASE_URL,\n    port: 443,\n    path: '/',\n    method: 'GET'\n  };\n\n  try {\n    const response = await makeBrowserRequest(options);\n    console.log('Status Code:', response.statusCode);\n    \n    if (!response.raw) {\n      console.log('Response:', JSON.stringify(response.data, null, 2));\n      return response.statusCode === 200;\n    } else {\n      console.log('Raw Response (first 500 chars):', response.data.substring(0, 500));\n      // Check if it contains API information\n      return response.statusCode === 200 && response.data.includes('SIMONTOK API');\n    }\n  } catch (error) {\n    console.error('Error testing root endpoint:', error.message);\n    return false;\n  }\n};\n\n// Test Login Endpoint with proper headers\nconst testLoginWithHeaders = async () => {\n  console.log('\\n=== Testing Login Endpoint with Browser Headers ===');\n  \n  const postData = JSON.stringify(SUPERADMIN_CREDENTIALS);\n  \n  const options = {\n    hostname: API_BASE_URL,\n    port: 443,\n    path: '/api/users/login',\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Content-Length': Buffer.byteLength(postData)\n    }\n  };\n\n  try {\n    const response = await makeBrowserRequest(options, postData);\n    console.log('Status Code:', response.statusCode);\n    \n    if (!response.raw) {\n      console.log('Response:', JSON.stringify(response.data, null, 2));\n      \n      if (response.statusCode === 200 && response.data.token) {\n        authToken = response.data.token;\n        console.log('✅ Login successful! Token acquired.');\n        return true;\n      } else {\n        console.log('❌ Login failed:', response.data.message || 'Unknown error');\n        return false;\n      }\n    } else {\n      console.log('Raw Response:', response.data);\n      // Check if it's Vercel auth protection\n      if (response.data.includes('Authentication Required') || response.data.includes('vercel')) {\n        console.log('❌ Vercel authentication protection is active');\n        return false;\n      }\n      return response.statusCode === 200;\n    }\n  } catch (error) {\n    console.error('Error testing login endpoint:', error.message);\n    return false;\n  }\n};\n\n// Main test function\nconst runBrowserLikeTests = async () => {\n  console.log('🚀 Starting SIMONTOK API Tests with Browser-like Requests');\n  console.log('========================================================');\n  \n  const results = {\n    root: false,\n    login: false\n  };\n  \n  // Test root endpoint first\n  results.root = await testRootEndpoint();\n  \n  // Test login with browser-like headers\n  results.login = await testLoginWithHeaders();\n  \n  // Summary\n  console.log('\\n\\n📊 TEST SUMMARY');\n  console.log('===============');\n  console.log('Root Endpoint:       ', results.root ? '✅ PASS' : '❌ FAIL');\n  console.log('Login Endpoint:      ', results.login ? '✅ PASS' : '❌ FAIL');\n  \n  const passedTests = Object.values(results).filter(result => result).length;\n  const totalTests = Object.values(results).length;\n  \n  console.log(`\\n📈 Overall: ${passedTests}/${totalTests} tests passed`);\n  \n  if (authToken) {\n    console.log(`\\n🔐 Auth Token: ${authToken.substring(0, 20)}...${authToken.substring(authToken.length - 20)}`);\n  } else {\n    console.log('\\n⚠️  Note: Vercel authentication protection may be preventing direct API access.');\n    console.log('   This is a security feature. To properly test the API:');\n    console.log('   1. Use a frontend application that runs in a browser');\n    console.log('   2. Access through Vercel dashboard');\n    console.log('   3. Use Vercel authentication bypass token if available');\n  }\n  \n  return results;\n};\n\n// Run the tests\nrunBrowserLikeTests().catch(error => {\n  console.error('Unexpected error during testing:', error);\n});