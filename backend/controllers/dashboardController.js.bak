const { User, SPBU, Sale, Delivery, Tank } = require('../models');
const { Op, fn, col } = require('sequelize');

// @desc    Get dashboard data
// @route   GET /api/dashboard
// @access  Public (but restricted by RBAC middleware)
const getDashboard = async (req, res) => {
  try {
    const userRole = req.user.Role.name;
    const userId = req.user.id;
    const spbuId = req.user.spbu_id;
    
    let dashboardData = {};
    
    // Initialize dashboard data structure
    dashboardData = {
      totalSales: 0,
      totalSalesCount: 0,
      stockPredictions: [],
      tankStocks: [],
      recentSales: [],
      recentDeliveries: []
    };
    
    if (userRole === 'Super Admin') {
      // Super Admin sees all data
      // Total sales for today
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const salesToday = await Sale.findAll({
        where: {
          created_at: {
            [Op.gte]: today
          }
        },
        attributes: [
          [fn('SUM', col('amount')), 'totalSales'],
          [fn('COUNT', col('id')), 'totalSalesCount']
        ]
      });
      
      dashboardData.totalSales = parseFloat(salesToday[0]?.dataValues.totalSales) || 0;
      dashboardData.totalSalesCount = parseInt(salesToday[0]?.dataValues.totalSalesCount) || 0;
      
      // Get all tanks with stock information
      const tanks = await Tank.findAll({
        include: [{
          model: SPBU,
          attributes: ['name', 'code']
        }]
      });
      
      dashboardData.tankStocks = tanks.map(tank => {
        const percentage = (parseFloat(tank.current_stock) / parseFloat(tank.capacity)) * 100;
        return {
          id: tank.id,
          name: tank.name,
          fuelType: tank.fuel_type,
          capacity: parseFloat(tank.capacity),
          currentStock: parseFloat(tank.current_stock),
          percentage: percentage
        };
      });
      
      // Get stock predictions (based on actual sales data)
      dashboardData.stockPredictions = await Promise.all(tanks.map(async (tank) => {
        // Calculate average daily consumption based on sales data from the past 30 days
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        
        // Get sales data for this fuel type for the past 30 days
        const salesData = await Sale.findAll({
          where: {
            fuel_type: tank.fuel_type,
            created_at: {
              [Op.gte]: thirtyDaysAgo
            }
          },
          attributes: [
            [fn('SUM', col('liters')), 'totalLiters'],
            [fn('COUNT', col('id')), 'totalTransactions']
          ]
        });
        
        // Calculate average daily consumption
        const totalLiters = parseFloat(salesData[0]?.dataValues.totalLiters) || 0;
        const totalTransactions = parseInt(salesData[0]?.dataValues.totalTransactions) || 0;
        const avgDailyConsumption = totalLiters > 0 ? totalLiters / 30 : 0;
        const avgTransactionsPerDay = totalTransactions > 0 ? totalTransactions / 30 : 0;
        
        console.log(`[Super Admin] Tank ${tank.id} - Fuel Type: ${tank.fuel_type}, Total Liters: ${totalLiters}, Avg Daily Consumption: ${avgDailyConsumption}`);
        console.log(`[Super Admin] Tank ${tank.id} - Will use fallback logic: ${avgDailyConsumption <= 0}`);
        
        // Calculate days until stockout
        const currentStock = parseFloat(tank.current_stock);
        const tankCapacity = parseFloat(tank.capacity);
        console.log(`[Super Admin] Tank ${tank.id} - Current Stock: ${currentStock}, Capacity: ${tankCapacity}`);
        
        // Enhanced stock prediction data
        let daysUntilStockout;
        let consumptionTrend = 'stable'; // 'increasing', 'decreasing', 'stable'
        let confidenceLevel = 'high'; // 'high', 'medium', 'low'
        
        if (avgDailyConsumption > 0) {
          daysUntilStockout = Math.floor(currentStock / avgDailyConsumption);
          console.log(`[Super Admin] Tank ${tank.id} - Calculated from consumption: ${currentStock} / ${avgDailyConsumption} = ${daysUntilStockout} days`);
          
          // Calculate trend by comparing last 15 days vs previous 15 days
          const fifteenDaysAgo = new Date();
          fifteenDaysAgo.setDate(fifteenDaysAgo.getDate() - 15);
          
          const recentSalesData = await Sale.findAll({
            where: {
              fuel_type: tank.fuel_type,
              created_at: {
                [Op.gte]: fifteenDaysAgo,
                [Op.lt]: thirtyDaysAgo
              }
            },
            attributes: [[fn('SUM', col('liters')), 'totalLiters']]
          });
          
          const previousSalesData = await Sale.findAll({
            where: {
              fuel_type: tank.fuel_type,
              created_at: {
                [Op.gte]: thirtyDaysAgo,
                [Op.lt]: fifteenDaysAgo
              }
            },
            attributes: [[fn('SUM', col('liters')), 'totalLiters']]
          });
          
          const recentLiters = parseFloat(recentSalesData[0]?.dataValues.totalLiters) || 0;
          const previousLiters = parseFloat(previousSalesData[0]?.dataValues.totalLiters) || 0;
          
          const recentAvg = recentLiters > 0 ? recentLiters / 15 : 0;
          const previousAvg = previousLiters > 0 ? previousLiters / 15 : 0;
          
          // Determine trend
          if (recentAvg > 0 && previousAvg > 0) {
            const trendPercentage = ((recentAvg - previousAvg) / previousAvg) * 100;
            if (trendPercentage > 10) {
              consumptionTrend = 'increasing';
              confidenceLevel = 'medium';
            } else if (trendPercentage < -10) {
              consumptionTrend = 'decreasing';
              confidenceLevel = 'medium';
            }
          }
          
          // If the calculated days is unrealistically high, fall back to percentage-based estimation
          if (daysUntilStockout > 1000) {
            console.log(`[Super Admin] Tank ${tank.id} - Days too high, falling back to percentage-based estimation`);
            const fillPercentage = (currentStock / tankCapacity) * 100;
            console.log(`[Super Admin] Tank ${tank.id} - Fill Percentage: ${fillPercentage}`);
            
            if (fillPercentage < 20) {
              daysUntilStockout = 5; // Critical
              console.log(`[Super Admin] Tank ${tank.id} - Critical level (fallback): ${daysUntilStockout} days`);
              confidenceLevel = 'low';
            } else if (fillPercentage < 50) {
              daysUntilStockout = 10; // Low
              console.log(`[Super Admin] Tank ${tank.id} - Low level (fallback): ${daysUntilStockout} days`);
              confidenceLevel = 'low';
            } else {
              daysUntilStockout = 999; // Normal
              console.log(`[Super Admin] Tank ${tank.id} - Normal level (fallback): ${daysUntilStockout} days`);
              confidenceLevel = 'low';
            }
          }
        } else {
          // If no sales data, estimate based on fill percentage
          // Tanks with < 20% fill are considered critical (5 days or less)
          const fillPercentage = (currentStock / tankCapacity) * 100;
          console.log(`[Super Admin] Tank ${tank.id} - Fill Percentage: ${fillPercentage}`);
          
          if (fillPercentage < 20) {
            daysUntilStockout = 5; // Critical
            console.log(`[Super Admin] Tank ${tank.id} - Critical level: ${daysUntilStockout} days`);
          } else if (fillPercentage < 50) {
            daysUntilStockout = 10; // Low
            console.log(`[Super Admin] Tank ${tank.id} - Low level: ${daysUntilStockout} days`);
          } else {
            daysUntilStockout = 999; // Normal
            console.log(`[Super Admin] Tank ${tank.id} - Normal level: ${daysUntilStockout} days`);
          }
        }
        console.log(`[Super Admin] Tank ${tank.id} - Final Days Until Stockout: ${daysUntilStockout}`);
        
        const predictedStockoutDate = new Date();
        predictedStockoutDate.setDate(predictedStockoutDate.getDate() + daysUntilStockout);
        
        const superAdminResult = {
          fuelType: tank.fuel_type,
          currentStock: currentStock,
          tankCapacity: tankCapacity,
          avgDailyConsumption: avgDailyConsumption,
          avgTransactionsPerDay: avgTransactionsPerDay,
          consumptionTrend: consumptionTrend,
          confidenceLevel: confidenceLevel,
          predictedStockoutDate: predictedStockoutDate.toISOString(),
          daysUntilStockout: daysUntilStockout
        };
        console.log(`[SUPER_ADMIN] Tank ${tank.id} result:`, superAdminResult);
        return superAdminResult;
      }));
      console.log('[Super Admin] Final stock predictions:', dashboardData.stockPredictions);
      
      // Get recent sales (last 10)
      dashboardData.recentSales = await Sale.findAll({
        include: [{
          model: User,
          as: 'operator',
          attributes: ['name']
        }],
        order: [['created_at', 'DESC']],
        limit: 10
      }).then(sales => sales.map(sale => ({
        id: sale.id,
        operatorName: sale.operator ? sale.operator.name : 'Unknown',
        totalAmount: parseFloat(sale.amount),
        litersSold: parseFloat(sale.liters),
        createdAt: sale.created_at
      })));
      
      // Get recent deliveries (last 10)
      dashboardData.recentDeliveries = await Delivery.findAll({
        order: [['created_at', 'DESC']],
        limit: 10
      }).then(deliveries => deliveries.map(delivery => ({
        id: delivery.id,
        supplier: delivery.supplier,
        fuelType: delivery.fuel_type,
        liters: parseFloat(delivery.liters),
        status: delivery.status,
        createdAt: delivery.created_at
      })));
      
    } else if (userRole === 'Admin' || userRole === 'Operator') {
      // Admin and Operator see SPBU-specific data
      if (!spbuId) {
        return res.status(400).json({
          success: false,
          message: 'User must be assigned to an SPBU'
        });
      }
      
      // Total sales for today for this SPBU
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const salesToday = await Sale.findAll({
        where: {
          spbu_id: spbuId,
          created_at: {
            [Op.gte]: today
          }
        },
        attributes: [
          [fn('SUM', col('amount')), 'totalSales'],
          [fn('COUNT', col('id')), 'totalSalesCount']
        ]
      });
      
      dashboardData.totalSales = parseFloat(salesToday[0]?.dataValues.totalSales) || 0;
      dashboardData.totalSalesCount = parseInt(salesToday[0]?.dataValues.totalSalesCount) || 0;
      
      // Get tanks for this SPBU
      const tanks = await Tank.findAll({
        where: {
          spbu_id: spbuId
        }
      });
      
      dashboardData.tankStocks = tanks.map(tank => {
        const percentage = (parseFloat(tank.current_stock) / parseFloat(tank.capacity)) * 100;
        return {
          id: tank.id,
          name: tank.name,
          fuelType: tank.fuel_type,
          capacity: parseFloat(tank.capacity),
          currentStock: parseFloat(tank.current_stock),
          percentage: percentage
        };
      });
      
      // Get stock predictions for this SPBU (based on actual sales data)
      dashboardData.stockPredictions = await Promise.all(tanks.map(async (tank) => {
        // Calculate average daily consumption based on sales data from the past 30 days
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        
        // Get sales data for this fuel type in this SPBU for the past 30 days
        const salesData = await Sale.findAll({
          where: {
            spbu_id: spbuId,
            fuel_type: tank.fuel_type,
            created_at: {
              [Op.gte]: thirtyDaysAgo
            }
          },
          attributes: [
            [fn('SUM', col('liters')), 'totalLiters'],
            [fn('COUNT', col('id')), 'totalTransactions']
          ]
        });
        
        // Calculate average daily consumption
        const totalLiters = parseFloat(salesData[0]?.dataValues.totalLiters) || 0;
        const totalTransactions = parseInt(salesData[0]?.dataValues.totalTransactions) || 0;
        const avgDailyConsumption = totalLiters > 0 ? totalLiters / 30 : 0;
        const avgTransactionsPerDay = totalTransactions > 0 ? totalTransactions / 30 : 0;
        
        console.log(`[Admin/Operator] Tank ${tank.id} - Fuel Type: ${tank.fuel_type}, SPBU ID: ${spbuId}, Total Liters: ${totalLiters}, Avg Daily Consumption: ${avgDailyConsumption}`);
        console.log(`[Admin/Operator] Tank ${tank.id} - Will use fallback logic: ${avgDailyConsumption <= 0}`);
        
        // Calculate days until stockout
        const currentStock = parseFloat(tank.current_stock);
        const tankCapacity = parseFloat(tank.capacity);
        console.log(`[Admin/Operator] Tank ${tank.id} - Current Stock: ${currentStock}, Capacity: ${tankCapacity}`);
        
        // Enhanced stock prediction data
        let daysUntilStockout;
        let consumptionTrend = 'stable'; // 'increasing', 'decreasing', 'stable'
        let confidenceLevel = 'high'; // 'high', 'medium', 'low'
        
        if (avgDailyConsumption > 0) {
          daysUntilStockout = Math.floor(currentStock / avgDailyConsumption);
          console.log(`[Admin/Operator] Tank ${tank.id} - Calculated from consumption: ${currentStock} / ${avgDailyConsumption} = ${daysUntilStockout} days`);
          
          // Calculate trend by comparing last 15 days vs previous 15 days
          const fifteenDaysAgo = new Date();
          fifteenDaysAgo.setDate(fifteenDaysAgo.getDate() - 15);
          
          const recentSalesData = await Sale.findAll({
            where: {
              spbu_id: spbuId,
              fuel_type: tank.fuel_type,
              created_at: {
                [Op.gte]: fifteenDaysAgo,
                [Op.lt]: thirtyDaysAgo
              }
            },
            attributes: [[fn('SUM', col('liters')), 'totalLiters']]
          });
          
          const previousSalesData = await Sale.findAll({
            where: {
              spbu_id: spbuId,
              fuel_type: tank.fuel_type,
              created_at: {
                [Op.gte]: thirtyDaysAgo,
                [Op.lt]: fifteenDaysAgo
              }
            },
            attributes: [[fn('SUM', col('liters')), 'totalLiters']]
          });
          
          const recentLiters = parseFloat(recentSalesData[0]?.dataValues.totalLiters) || 0;
          const previousLiters = parseFloat(previousSalesData[0]?.dataValues.totalLiters) || 0;
          
          const recentAvg = recentLiters > 0 ? recentLiters / 15 : 0;
          const previousAvg = previousLiters > 0 ? previousLiters / 15 : 0;
          
          // Determine trend
          if (recentAvg > 0 && previousAvg > 0) {
            const trendPercentage = ((recentAvg - previousAvg) / previousAvg) * 100;
            if (trendPercentage > 10) {
              consumptionTrend = 'increasing';
              confidenceLevel = 'medium';
            } else if (trendPercentage < -10) {
              consumptionTrend = 'decreasing';
              confidenceLevel = 'medium';
            }
          }
          
          // If the calculated days is unrealistically high, fall back to percentage-based estimation
          if (daysUntilStockout > 1000) {
            console.log(`[Admin/Operator] Tank ${tank.id} - Days too high, falling back to percentage-based estimation`);
            const fillPercentage = (currentStock / tankCapacity) * 100;
            console.log(`[Admin/Operator] Tank ${tank.id} - Fill Percentage: ${fillPercentage}`);
            
            if (fillPercentage < 20) {
              daysUntilStockout = 5; // Critical
              console.log(`[Admin/Operator] Tank ${tank.id} - Critical level (fallback): ${daysUntilStockout} days`);
              confidenceLevel = 'low';
            } else if (fillPercentage < 50) {
              daysUntilStockout = 10; // Low
              console.log(`[Admin/Operator] Tank ${tank.id} - Low level (fallback): ${daysUntilStockout} days`);
              confidenceLevel = 'low';
            } else {
              daysUntilStockout = 999; // Normal
              console.log(`[Admin/Operator] Tank ${tank.id} - Normal level (fallback): ${daysUntilStockout} days`);
              confidenceLevel = 'low';
            }
          }
        } else {
          // If no sales data, estimate based on fill percentage
          // Tanks with < 20% fill are considered critical (5 days or less)
          const fillPercentage = (currentStock / tankCapacity) * 100;
          console.log(`[Admin/Operator] Tank ${tank.id} - Fill Percentage: ${fillPercentage}`);
          
          if (fillPercentage < 20) {
            daysUntilStockout = 5; // Critical
            console.log(`[Admin/Operator] Tank ${tank.id} - Critical level: ${daysUntilStockout} days`);
          } else if (fillPercentage < 50) {
            daysUntilStockout = 10; // Low
            console.log(`[Admin/Operator] Tank ${tank.id} - Low level: ${daysUntilStockout} days`);
          } else {
            daysUntilStockout = 999; // Normal
            console.log(`[Admin/Operator] Tank ${tank.id} - Normal level: ${daysUntilStockout} days`);
          }
        }
        console.log(`[Admin/Operator] Tank ${tank.id} - Final Days Until Stockout: ${daysUntilStockout}`);
        
        const predictedStockoutDate = new Date();
        predictedStockoutDate.setDate(predictedStockoutDate.getDate() + daysUntilStockout);
        
        return {
          fuelType: tank.fuel_type,
          currentStock: currentStock,
          tankCapacity: tankCapacity,
          avgDailyConsumption: avgDailyConsumption,
          avgTransactionsPerDay: avgTransactionsPerDay,
          consumptionTrend: consumptionTrend,
          confidenceLevel: confidenceLevel,
          predictedStockoutDate: predictedStockoutDate.toISOString(),
          daysUntilStockout: daysUntilStockout
        };
      }));
      console.log('[Admin/Operator] Final stock predictions:', dashboardData.stockPredictions);
      
      // Get recent sales for this SPBU (last 10)
      dashboardData.recentSales = await Sale.findAll({
        where: {
          spbu_id: spbuId
        },
        include: [{
          model: User,
          as: 'operator',
          attributes: ['name']
        }],
        order: [['created_at', 'DESC']],
        limit: 10
      }).then(sales => sales.map(sale => ({
        id: sale.id,
        operatorName: sale.operator ? sale.operator.name : 'Unknown',
        totalAmount: parseFloat(sale.amount),
        litersSold: parseFloat(sale.liters),
        createdAt: sale.created_at
      })));
      
      // Get recent deliveries for this SPBU (last 10)
      dashboardData.recentDeliveries = await Delivery.findAll({
        where: {
          spbu_id: spbuId
        },
        order: [['created_at', 'DESC']],
        limit: 10
      }).then(deliveries => deliveries.map(delivery => ({
        id: delivery.id,
        supplier: delivery.supplier,
        fuelType: delivery.fuel_type,
        liters: parseFloat(delivery.liters),
        status: delivery.status,
        createdAt: delivery.created_at
      })));
    }
    
    res.status(200).json({
      success: true,
      data: dashboardData
    });
  } catch (error) {
    console.error('Error in getDashboard:', error);
    res.status(500).json({
      success: false,
      message: 'Server Error',
      error: error.message
    });
  }
};
          // If no sales data, estimate based on fill percentage
          // Tanks with < 20% fill are considered critical (5 days or less)
          const fillPercentage = (currentStock / tankCapacity) * 100;
          console.log(`[Super Admin] Tank ${tank.id} - Fill Percentage: ${fillPercentage}`);
          
          if (fillPercentage < 20) {
            daysUntilStockout = 5; // Critical
            console.log(`[Super Admin] Tank ${tank.id} - Critical level: ${daysUntilStockout} days`);
          } else if (fillPercentage < 50) {
            daysUntilStockout = 10; // Low
            console.log(`[Super Admin] Tank ${tank.id} - Low level: ${daysUntilStockout} days`);
          } else {
            daysUntilStockout = 999; // Normal
            console.log(`[Super Admin] Tank ${tank.id} - Normal level: ${daysUntilStockout} days`);
          }
        }
        console.log(`[Super Admin] Tank ${tank.id} - Final Days Until Stockout: ${daysUntilStockout}`);
        
        const predictedStockoutDate = new Date();
        predictedStockoutDate.setDate(predictedStockoutDate.getDate() + daysUntilStockout);
        
        const superAdminResult = {
          fuelType: tank.fuel_type,
          currentStock: currentStock,
          tankCapacity: tankCapacity,
          avgDailyConsumption: avgDailyConsumption,
          avgTransactionsPerDay: avgTransactionsPerDay,
          consumptionTrend: consumptionTrend,
          confidenceLevel: confidenceLevel,
          predictedStockoutDate: predictedStockoutDate.toISOString(),
          daysUntilStockout: daysUntilStockout
        };
        console.log(`[SUPER_ADMIN] Tank ${tank.id} result:`, superAdminResult);
        return superAdminResult;
      }));
      console.log('[Super Admin] Final stock predictions:', dashboardData.stockPredictions);
      
      // Get recent sales (last 10)
      dashboardData.recentSales = await Sale.findAll({
        include: [{
          model: User,
          as: 'operator',
          attributes: ['name']
        }],
        order: [['created_at', 'DESC']],
        limit: 10
      }).then(sales => sales.map(sale => ({
        id: sale.id,
        operatorName: sale.operator ? sale.operator.name : 'Unknown',
        totalAmount: parseFloat(sale.amount),
        litersSold: parseFloat(sale.liters),
        createdAt: sale.created_at
      })));
      
      // Get recent deliveries (last 10)
      dashboardData.recentDeliveries = await Delivery.findAll({
        order: [['created_at', 'DESC']],
        limit: 10
      }).then(deliveries => deliveries.map(delivery => ({
        id: delivery.id,
        supplier: delivery.supplier,
        fuelType: delivery.fuel_type,
        liters: parseFloat(delivery.liters),
        status: delivery.status,
        createdAt: delivery.created_at
      })));
      
    } else if (userRole === 'Admin' || userRole === 'Operator') {
      // Admin and Operator see SPBU-specific data
      if (!spbuId) {
        return res.status(400).json({
          success: false,
          message: 'User must be assigned to an SPBU'
        });
      }
      
      // Total sales for today for this SPBU
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const salesToday = await Sale.findAll({
        where: {
          spbu_id: spbuId,
          created_at: {
            [Op.gte]: today
          }
        },
        attributes: [
          [fn('SUM', col('amount')), 'totalSales'],
          [fn('COUNT', col('id')), 'totalSalesCount']
        ]
      });
      
      dashboardData.totalSales = parseFloat(salesToday[0]?.dataValues.totalSales) || 0;
      dashboardData.totalSalesCount = parseInt(salesToday[0]?.dataValues.totalSalesCount) || 0;
      
      // Get tanks for this SPBU
      const tanks = await Tank.findAll({
        where: {
          spbu_id: spbuId
        }
      });
      
      dashboardData.tankStocks = tanks.map(tank => {
        const percentage = (parseFloat(tank.current_stock) / parseFloat(tank.capacity)) * 100;
        return {
          id: tank.id,
          name: tank.name,
          fuelType: tank.fuel_type,
          capacity: parseFloat(tank.capacity),
          currentStock: parseFloat(tank.current_stock),
          percentage: percentage
        };
      });
      
      // Get stock predictions for this SPBU (based on actual sales data)
      dashboardData.stockPredictions = await Promise.all(tanks.map(async (tank) => {
        // Calculate average daily consumption based on sales data from the past 30 days
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        
        // Get sales data for this fuel type in this SPBU for the past 30 days
        const salesData = await Sale.findAll({
          where: {
            spbu_id: spbuId,
            fuel_type: tank.fuel_type,
            created_at: {
              [Op.gte]: thirtyDaysAgo
            }
          },
          attributes: [
            [fn('SUM', col('liters')), 'totalLiters'],
            [fn('COUNT', col('id')), 'totalTransactions']
          ]
        });
        
        // Calculate average daily consumption
        const totalLiters = parseFloat(salesData[0]?.dataValues.totalLiters) || 0;
        const totalTransactions = parseInt(salesData[0]?.dataValues.totalTransactions) || 0;
        const avgDailyConsumption = totalLiters > 0 ? totalLiters / 30 : 0;
        const avgTransactionsPerDay = totalTransactions > 0 ? totalTransactions / 30 : 0;
        
        console.log(`[Admin/Operator] Tank ${tank.id} - Fuel Type: ${tank.fuel_type}, SPBU ID: ${spbuId}, Total Liters: ${totalLiters}, Avg Daily Consumption: ${avgDailyConsumption}`);
        console.log(`[Admin/Operator] Tank ${tank.id} - Will use fallback logic: ${avgDailyConsumption <= 0}`);
        
        // Calculate days until stockout
        const currentStock = parseFloat(tank.current_stock);
        const tankCapacity = parseFloat(tank.capacity);
        console.log(`[Admin/Operator] Tank ${tank.id} - Current Stock: ${currentStock}, Capacity: ${tankCapacity}`);
        
        // Enhanced stock prediction data
        let daysUntilStockout;
        let consumptionTrend = 'stable'; // 'increasing', 'decreasing', 'stable'
        let confidenceLevel = 'high'; // 'high', 'medium', 'low'
        
        if (avgDailyConsumption > 0) {
          daysUntilStockout = Math.floor(currentStock / avgDailyConsumption);
          console.log(`[Admin/Operator] Tank ${tank.id} - Calculated from consumption: ${currentStock} / ${avgDailyConsumption} = ${daysUntilStockout} days`);
          
          // Calculate trend by comparing last 15 days vs previous 15 days
          const fifteenDaysAgo = new Date();
          fifteenDaysAgo.setDate(fifteenDaysAgo.getDate() - 15);
          
          const recentSalesData = await Sale.findAll({
            where: {
              spbu_id: spbuId,
              fuel_type: tank.fuel_type,
              created_at: {
                [Op.gte]: fifteenDaysAgo,
                [Op.lt]: thirtyDaysAgo
              }
            },
            attributes: [[fn('SUM', col('liters')), 'totalLiters']]
          });
          
          const previousSalesData = await Sale.findAll({
            where: {
              spbu_id: spbuId,
              fuel_type: tank.fuel_type,
              created_at: {
                [Op.gte]: thirtyDaysAgo,
                [Op.lt]: fifteenDaysAgo
              }
            },
            attributes: [[fn('SUM', col('liters')), 'totalLiters']]
          });
          
          const recentLiters = parseFloat(recentSalesData[0]?.dataValues.totalLiters) || 0;
          const previousLiters = parseFloat(previousSalesData[0]?.dataValues.totalLiters) || 0;
          
          const recentAvg = recentLiters > 0 ? recentLiters / 15 : 0;
          const previousAvg = previousLiters > 0 ? previousLiters / 15 : 0;
          
          // Determine trend
          if (recentAvg > 0 && previousAvg > 0) {
            const trendPercentage = ((recentAvg - previousAvg) / previousAvg) * 100;
            if (trendPercentage > 10) {
              consumptionTrend = 'increasing';
              confidenceLevel = 'medium';
            } else if (trendPercentage < -10) {
              consumptionTrend = 'decreasing';
              confidenceLevel = 'medium';
            }
          }
          
          // If the calculated days is unrealistically high, fall back to percentage-based estimation
          if (daysUntilStockout > 1000) {
            console.log(`[Admin/Operator] Tank ${tank.id} - Days too high, falling back to percentage-based estimation`);
            const fillPercentage = (currentStock / tankCapacity) * 100;
            console.log(`[Admin/Operator] Tank ${tank.id} - Fill Percentage: ${fillPercentage}`);
            
            if (fillPercentage < 20) {
              daysUntilStockout = 5; // Critical
              console.log(`[Admin/Operator] Tank ${tank.id} - Critical level (fallback): ${daysUntilStockout} days`);
              confidenceLevel = 'low';
            } else if (fillPercentage < 50) {
              daysUntilStockout = 10; // Low
              console.log(`[Admin/Operator] Tank ${tank.id} - Low level (fallback): ${daysUntilStockout} days`);
              confidenceLevel = 'low';
            } else {
              daysUntilStockout = 999; // Normal
              console.log(`[Admin/Operator] Tank ${tank.id} - Normal level (fallback): ${daysUntilStockout} days`);
              confidenceLevel = 'low';
            }
          }
        } else {
          // If no sales data, estimate based on fill percentage
          // Tanks with < 20% fill are considered critical (5 days or less)
          const fillPercentage = (currentStock / tankCapacity) * 100;
          console.log(`[Admin/Operator] Tank ${tank.id} - Fill Percentage: ${fillPercentage}`);
          
          if (fillPercentage < 20) {
            daysUntilStockout = 5; // Critical
            console.log(`[Admin/Operator] Tank ${tank.id} - Critical level: ${daysUntilStockout} days`);
          } else if (fillPercentage < 50) {
            daysUntilStockout = 10; // Low
            console.log(`[Admin/Operator] Tank ${tank.id} - Low level: ${daysUntilStockout} days`);
          } else {
            daysUntilStockout = 999; // Normal
            console.log(`[Admin/Operator] Tank ${tank.id} - Normal level: ${daysUntilStockout} days`);
          }
        }
        console.log(`[Admin/Operator] Tank ${tank.id} - Final Days Until Stockout: ${daysUntilStockout}`);
        
        const predictedStockoutDate = new Date();
        predictedStockoutDate.setDate(predictedStockoutDate.getDate() + daysUntilStockout);
        
        return {
          fuelType: tank.fuel_type,
          currentStock: currentStock,
          tankCapacity: tankCapacity,
          avgDailyConsumption: avgDailyConsumption,
          avgTransactionsPerDay: avgTransactionsPerDay,
          consumptionTrend: consumptionTrend,
          confidenceLevel: confidenceLevel,
          predictedStockoutDate: predictedStockoutDate.toISOString(),
          daysUntilStockout: daysUntilStockout
        };
      }));
      console.log('[Admin/Operator] Final stock predictions:', dashboardData.stockPredictions);
      
      // Get recent sales for this SPBU (last 10)
      dashboardData.recentSales = await Sale.findAll({
        where: {
          spbu_id: spbuId
        },
        include: [{
          model: User,
          as: 'operator',
          attributes: ['name']
        }],
        order: [['created_at', 'DESC']],
        limit: 10
      }).then(sales => sales.map(sale => ({
        id: sale.id,
        operatorName: sale.operator ? sale.operator.name : 'Unknown',
        totalAmount: parseFloat(sale.amount),
        litersSold: parseFloat(sale.liters),
        createdAt: sale.created_at
      })));
      
      // Get recent deliveries for this SPBU (last 10)
      dashboardData.recentDeliveries = await Delivery.findAll({
        where: {
          spbu_id: spbuId
        },
        order: [['created_at', 'DESC']],
        limit: 10
      }).then(deliveries => deliveries.map(delivery => ({
        id: delivery.id,
        supplier: delivery.supplier,
        fuelType: delivery.fuel_type,
        liters: parseFloat(delivery.liters),
        status: delivery.status,
        createdAt: delivery.created_at
      })));
    }
    
    res.status(200).json({
      success: true,
      data: dashboardData
    });
  } catch (error) {
    console.error('Error in getDashboard:', error);
    res.status(500).json({
      success: false,
      message: 'Server Error',
      error: error.message
    });
  }
};
          // If no sales data, estimate based on fill percentage
          // Tanks with < 20% fill are considered critical (5 days or less)
          const fillPercentage = (currentStock / tankCapacity) * 100;
          console.log(`[Admin/Operator] Tank ${tank.id} - Fill Percentage: ${fillPercentage}`);
          
          if (fillPercentage < 20) {
            daysUntilStockout = 5; // Critical
            console.log(`[Admin/Operator] Tank ${tank.id} - Critical level: ${daysUntilStockout} days`);
          } else if (fillPercentage < 50) {
            daysUntilStockout = 10; // Low
            console.log(`[Admin/Operator] Tank ${tank.id} - Low level: ${daysUntilStockout} days`);
          } else {
            daysUntilStockout = 999; // Normal
            console.log(`[Admin/Operator] Tank ${tank.id} - Normal level: ${daysUntilStockout} days`);
          }
        }
        console.log(`[Admin/Operator] Tank ${tank.id} - Final Days Until Stockout: ${daysUntilStockout}`);
        
        const predictedStockoutDate = new Date();
        predictedStockoutDate.setDate(predictedStockoutDate.getDate() + daysUntilStockout);
        
        return {
          fuelType: tank.fuel_type,
          currentStock: currentStock,
          tankCapacity: tankCapacity,
          avgDailyConsumption: avgDailyConsumption,
          avgTransactionsPerDay: avgTransactionsPerDay,
          consumptionTrend: consumptionTrend,
          confidenceLevel: confidenceLevel,
          predictedStockoutDate: predictedStockoutDate.toISOString(),
          daysUntilStockout: daysUntilStockout
        };
      }));
      console.log('[Admin/Operator] Final stock predictions:', dashboardData.stockPredictions);
      
      // Get recent sales for this SPBU (last 10)
      dashboardData.recentSales = await Sale.findAll({
        where: {
          spbu_id: spbuId
        },
        include: [{
          model: User,
          as: 'operator',
          attributes: ['name']
        }],
        order: [['created_at', 'DESC']],
        limit: 10
      }).then(sales => sales.map(sale => ({
        id: sale.id,
        operatorName: sale.operator ? sale.operator.name : 'Unknown',
        totalAmount: parseFloat(sale.amount),
        litersSold: parseFloat(sale.liters),
        createdAt: sale.created_at
      })));
      
      // Get recent deliveries for this SPBU (last 10)
      dashboardData.recentDeliveries = await Delivery.findAll({
        where: {
          spbu_id: spbuId
        },
        order: [['created_at', 'DESC']],
        limit: 10
      }).then(deliveries => deliveries.map(delivery => ({
        id: delivery.id,
        supplier: delivery.supplier,
        fuelType: delivery.fuel_type,
        liters: parseFloat(delivery.liters),
        status: delivery.status,
        createdAt: delivery.created_at
      })));
    }
    
    res.status(200).json({
      success: true,
      data: dashboardData
    });
  } catch (error) {
    console.error('Error in getDashboard:', error);
    res.status(500).json({
      success: false,
      message: 'Server Error',
      error: error.message
    });
  }
};